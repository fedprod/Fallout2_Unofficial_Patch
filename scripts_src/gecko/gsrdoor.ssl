/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: RED Door
        Locked: Yes
        Trapped: No
        Description: This is a special red door in the Reactor.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "gsrdoor"
#include "../headers/geckpwpl.h"



/* Sets whether the door is locked or trapped */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_NON_DESTROY
#define LOCK_STATUS                     STATE_ELECTRIC_LOCK

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)

/* Penalties for disarming the trap */





#define REACTOR_KEY                     PID_RED_PASS_KEY

procedure timed_event_p_proc;
procedure key_lock_door;
procedure key_unlock_door;
procedure anger;



#define custom_use_obj_on_p_proc
#define custom_use_skill_on_p_proc
#include "../headers/doors.h"










/********************************************************************
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
********************************************************************/

procedure use_p_proc begin
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Traps_Roll:=roll_vs_skill(source_obj,SKILL_TRAPS,Trap_Bonus);

   if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
       if (is_success(Traps_Roll)) then begin
           script_overrides;
           set_local_var(LVAR_Found_Trap,1);
           reg_anim_clear(source_obj);

           if (source_obj == dude_obj) then begin
               display_msg(mstr(204));
           end
           else begin
               display_msg(mstr(205));
           end
       end

       else begin
           if (obj_is_locked(self_obj)) then begin
               script_overrides;
               display_msg(mstr(203));
               call Damage_Critter;
           end
           else begin
               call Damage_Critter;
           end
       end
   end

   else if (obj_is_locked(self_obj)) then begin
       script_overrides;
       display_msg(mstr(203));
   end
end





procedure timed_event_p_proc begin
   set_map_var(MVAR_Lockpick_Attempt,0);
end

procedure anger begin
   set_map_var(MVAR_Lockpick_Attempt, 1); //if guard is watching...stop the dude
   add_timer_event(self_obj,game_ticks(3),0);
end

/**********************************************************************************
   Should the player try using a skill on the door, here are where the skill rolls
   will be made. The ones which need to be in here are: Lockpick and Traps. Science
   and Repair can be added to this list to give more information about the door.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   variable Skill_Used;

   Skill_Used:=action_being_used;

   if (Skill_Used == SKILL_LOCKPICK) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
           call Unlock_Lock;
       end
       else begin
           call Set_Lock;
       end
       call anger;
   end                                                          // End of Skill_Lockpick

   else if (Skill_Used == SKILL_TRAPS) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           call Skill_Disarm_Traps;
       end
       else begin
           if (source_obj == dude_obj) then begin
               display_msg(mstr(195));
           end

           else begin
               display_msg(obj_name(source_obj)+mstr(200));
           end
       end
   end                                                          // End of Skill_Traps

end


/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/
procedure use_obj_on_p_proc begin
   variable Tool;

   Tool:=obj_pid(obj_being_used_with);

   std_lockpick_outer_block

   else if (LOCK_STATUS == STATE_ELECTRIC_LOCK) then begin
       if (Tool == REACTOR_KEY) then begin
          script_overrides; //added by killap
          if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
             call key_unlock_door;
          end
          else begin
             call key_lock_door;
          end
       end
       else elec_lockpick_inner_block
   end

   else if (Tool == PID_CROWBAR) then begin
       script_overrides; //added by killap
       call Pry_Door;
   end

   else if ((Tool == PID_DYNAMITE) or (Tool == PID_PLASTIC_EXPLOSIVES)) then begin
       script_overrides; //added by killap
       call Set_Trap;
   end

end

procedure key_unlock_door begin
   set_local_var(LVAR_Locked, STATE_INACTIVE);              // Door is unlocked
   obj_unlock(self_obj);                                    // engine unlock door
   script_overrides;
   display_msg(mstr(300));
end

procedure key_lock_door begin
   script_overrides;
   if (obj_is_open(self_obj)) then
       display_msg(mstr(302));
   else begin
      set_local_var(LVAR_Locked, STATE_ACTIVE);                // Door is unlocked
      obj_lock(self_obj);                                      // engine unlock door
      display_msg(mstr(301));
   end
end






























/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/




















