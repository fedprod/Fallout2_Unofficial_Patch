/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: YELLOW Door
        Locked: Yes
        Trapped: No
        Description: This is a special yellow door in the Reactor.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "gsydoor"
#include "../headers/geckpwpl.h"




/* Sets whether the door is locked or trapped */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_NON_DESTROY
#define LOCK_STATUS                     STATE_ELECTRIC_LOCK

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)

/* Penalties for disarming the trap */





#define REACTOR_KEY                     PID_YELLOW_PASS_KEY


procedure timed_event_p_proc;
procedure key_lock_door;
procedure key_unlock_door;
procedure anger;


#define custom_use_obj_on_p_proc
#include "../headers/doors.h"










/********************************************************************
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
********************************************************************/

procedure use_p_proc begin
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Traps_Roll:=roll_vs_skill(source_obj,SKILL_TRAPS,Trap_Bonus);

   if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
       if (is_success(Traps_Roll)) then begin
           script_overrides;
           set_local_var(LVAR_Found_Trap,1);
           reg_anim_clear(source_obj);

           if (source_obj == dude_obj) then begin
               display_msg(mstr(204));
           end
           else begin
               display_msg(mstr(205));
           end
       end

       else begin
           if (obj_is_locked(self_obj)) then begin
               script_overrides;
               display_msg(mstr(203));
               call Damage_Critter;
           end
           else begin
               call Damage_Critter;
           end
       end
   end

   else if (obj_is_locked(self_obj)) then begin
       script_overrides;
       display_msg(mstr(203));
   end
end



/**********************************************************************************
   Should the player examine the door closely, then he should be allowed a lockpick
   roll, a traps roll and a perception roll. Depending on which rolls are made will
   determine how much information about the door will be given.
**********************************************************************************/

procedure description_p_proc begin
   script_overrides;
   if ((local_var(LVAR_Locked) == STATE_ACTIVE) and (local_var(LVAR_Trapped) == STATE_ACTIVE)) then begin
       call Look_Traps_And_Locks;
   end

   else if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
       call Look_Traps;
   end

   else if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       call Look_Locks;
   end

   else if (DOOR_STATUS == STATE_WOOD) then begin
       display_msg(mstr(100));
   end

   else begin
       display_msg(mstr(101));
   end
end

procedure timed_event_p_proc begin
   set_map_var(MVAR_Lockpick_Attempt,0);
end

procedure anger begin
   set_map_var(MVAR_Lockpick_Attempt, 1); //if guard is watching...stop the dude
   add_timer_event(self_obj,game_ticks(3),0);
end

/**********************************************************************************
   Should the player try using a skill on the door, here are where the skill rolls
   will be made. The ones which need to be in here are: Lockpick and Traps. Science
   and Repair can be added to this list to give more information about the door.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   variable Skill_Used;

   Skill_Used:=action_being_used;

   if (Skill_Used == SKILL_LOCKPICK) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
           call Unlock_Lock;
       end
       else begin
           call Set_Lock;
       end
       call anger;
   end                                                          // End of Skill_Lockpick

   else if (Skill_Used == SKILL_TRAPS) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           call Skill_Disarm_Traps;
       end
       else begin
           if (source_obj == dude_obj) then begin
               display_msg(mstr(195));
           end

           else begin
               display_msg(obj_name(source_obj)+mstr(200));
           end
       end
   end                                                          // End of Skill_Traps

end


/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/
procedure use_obj_on_p_proc begin
   variable Tool;

   Tool:=obj_pid(obj_being_used_with);

   std_lockpick_outer_block

   else if (LOCK_STATUS == STATE_ELECTRIC_LOCK) then begin
       if (Tool == REACTOR_KEY) then begin
         script_overrides; //added by killap
         if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
             call key_unlock_door;
          end
          else begin
             call key_lock_door;
          end
       end
       else elec_lockpick_inner_block
   end

   else if (Tool == PID_CROWBAR) then begin
       script_overrides; //added by killap
       call Pry_Door;
   end

   else if ((Tool == PID_DYNAMITE) or (Tool == PID_PLASTIC_EXPLOSIVES)) then begin
       script_overrides; //added by killap
       call Set_Trap;
   end

end

procedure key_unlock_door begin
   set_local_var(LVAR_Locked, STATE_INACTIVE);              // Door is unlocked
   obj_unlock(self_obj);                                    // engine unlock door
   script_overrides;
   display_msg(mstr(300));
end

procedure key_lock_door begin
   script_overrides;
   if (obj_is_open(self_obj)) then
       display_msg(mstr(302));
   else begin
      set_local_var(LVAR_Locked, STATE_ACTIVE);                // Door is unlocked
      obj_lock(self_obj);                                      // engine unlock door
      display_msg(mstr(301));
   end
end

/******************************************************************************************
   Should the door sustain damage from anything (ie, dynamite, plastic explosives, rockets,
   or any other forms of damage), this procedure will be called to destroy the door and
   free up the space.
******************************************************************************************/

procedure damage_p_proc begin
   variable Trap_Damage;

  /************ Wood Door ****************/

 if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
   if (DOOR_STATUS == STATE_WOOD) then begin
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
           destroy_object(self_obj);
       end

       else begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           destroy_object(self_obj);
       end
   end

  /************ Metal Door ****************/

   else if (DOOR_STATUS == STATE_METAL) then begin
       set_local_var(LVAR_Explosion_Attempts,local_var(LVAR_Explosion_Attempts)+1);
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
       end

       else if (local_var(LVAR_Explosion_Attempts) > DOOR_STRENGTH) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked,STATE_INACTIVE);
           destroy_object(self_obj);
       end
   end
 end
   else begin
       display_msg(mstr(193));
   end
end


/***************************************************************************************
   Whenever the map is first entered, this procedure will be called. The main purpose of
   this procedure is to lock the door from the outset, rather than having to worry about
   it through Mapper. After the door has been unlocked, it will remain as such, unless
   the player locks it once more.
***************************************************************************************/

procedure map_enter_p_proc begin

/* Set up the door state when the player first enters the map */
   if (local_var(LVAR_Set_Door_Status) == 0) then begin
       set_local_var(LVAR_Set_Door_Status,1);
       set_local_var(LVAR_Locked,LOCKED_STATUS);
       set_local_var(LVAR_Trapped,TRAPPED_STATUS);
   end

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time. It is used to make
   sure that the door does not lock on it's own and that the player will be able to get
   through once he has unlocked the door. Once more, this is so that locking and
   unlocking do not need to be done in Mapper.
**************************************************************************************/

procedure map_update_p_proc begin
   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end
end


/*************************************************************************************
   This is the set of conditions for when you look at a locked and trapped door, based
   on your lockpick and traps skills and perception to notice things.
*************************************************************************************/

procedure Look_Traps_And_Locks begin
   variable Perception_Check;
   variable Traps_Check;
   variable Locks_Check;

   Perception_Check:=do_check(dude_obj,STAT_pe,0);
   Traps_Check:=roll_vs_skill(dude_obj,SKILL_TRAPS,0);
   Locks_Check:=roll_vs_skill(dude_obj,SKILL_LOCKPICK,0);

   if (is_success(Perception_Check)) then begin

/*************************************************************************************************/

      /* Critical Success of a Perception Check  (Start)*/

       if (is_critical(Perception_Check)) then begin

           if (is_success(Traps_Check)) then begin
               set_local_var(LVAR_Found_Trap,1);                // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

               if (is_critical(Traps_Check)) then begin

                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(102));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(103));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(104));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(105));
                   end                                          // end of regular failure (Locks)
               end                                              // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

               else begin
                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(106));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(107));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(108));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(109));
                   end                                          // end of regular failure (Locks)
               end                                              // regular success (Traps)
           end

      /* Critical Failure of a Traps Check  (Start)*/

           else if (is_critical(Traps_Check)) then begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(110));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(111));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(112));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(113));
               end                                              // end of regular failure (Locks)
          end                                                   // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(114));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(115));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(116));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(117));
               end                                              // end of regular failure (Locks)
           end                                                  // regular failure (Traps)
       end                                                      // critical success (Stat_Pe)

      /* Critical Success of a Perception Check  (Finish)*/

/*************************************************************************************************/

      /* Success of a Perception Check  (Start)*/

       else begin
           if (is_success(Traps_Check)) then begin
               set_local_var(LVAR_Found_Trap,1);                // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

               if (is_critical(Traps_Check)) then begin

                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(118));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(119));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(120));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(121));
                   end                                          // end of regular failure (Locks)
               end                                              // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

               else begin
                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(122));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(123));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(124));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(125));
                   end                                          // end of regular failure (Locks)
               end                                              // regular success (Traps)
           end

      /* Critical Failure of a Traps Check  (Start)*/

           else if (is_critical(Traps_Check)) then begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(126));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(127));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(128));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(129));
               end                                              // end of regular failure (Locks)
           end                                                  // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(130));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(131));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(132));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(133));
               end                                              // end of regular failure (Locks)
           end                                                  // regular failure (Traps)
       end                                                      // regular success (Stat_pe)
   end

      /* Success of a Perception Check  (Finish)*/

/*************************************************************************************************/

      /* Critical Failure of a Perception Check  (Start)*/

   else if (is_critical(Perception_Check)) then begin
       if (is_success(Traps_Check)) then begin
           set_local_var(LVAR_Found_Trap,1);                    // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

           if (is_critical(Traps_Check)) then begin

               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(134));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(135));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(136));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(137));
               end                                              // end of regular failure (Locks)
           end                                                  // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(138));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(139));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(140));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(141));
               end                                              // end of regular failure (Locks)
           end                                                  // regular success (Traps)
       end

      /* Critical Failure of a Traps Check  (Start)*/

       else if (is_critical(Traps_Check)) then begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(142));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(143));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(144));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(145));
           end                                                  // end of regular failure (Locks)
       end                                                      // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

       else begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(146));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(147));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(148));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(149));
           end                                                  // end of regular failure (Locks)
       end                                                      // regular failure (Traps)
   end                                                          // Critical Failure (Stat_pe)

      /* Critical Failure of a Perception Check  (Finish)*/

/*************************************************************************************************/

      /* Failure of a Perception Check  (Start)*/

   else begin
       if (is_success(Traps_Check)) then begin
           set_local_var(LVAR_Found_Trap,1);                    // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

           if (is_critical(Traps_Check)) then begin

               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(150));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(151));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(152));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(153));
               end                                              // end of regular failure (Locks)
           end                                                  // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(154));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(155));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(156));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(157));
               end                                              // end of regular failure (Locks)
           end                                                  // regular success (Traps)
       end

      /* Critical Failure of a Traps Check  (Start)*/

       else if (is_critical(Traps_Check)) then begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(158));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(159));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(160));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(161));
           end                                                  // end of regular failure (Locks)
       end                                                      // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

       else begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(162));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(163));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(164));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(165));
           end                                                  // end of regular failure (Locks)
       end                                                      // regular failure (Traps)
   end                                                          // Regular Failure (Stat_pe)

      /* Failure of a Perception Check  (Finish)*/

end





















/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/




















