/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "siclsdor"



/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_INACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_WOOD
#define LOCK_STATUS                     STATE_STANDARD_LOCK
#define CLOSE_STATUS                    STATE_DOOR_CLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)

#define PARTY_CLOSE_DIST                (5)
procedure checkPartyMembers;

#include "../headers/doors.h"


#define CHECKMEMBER(inparty, obj)                                           \
   if (inparty) then begin                                                  \
      if (tile_distance_objs(self_obj, obj) <= PARTY_CLOSE_DIST) then begin \
         return 1;                                                          \
      end                                                                   \
   end

procedure checkPartyMembers begin
   CHECKMEMBER(Vic_In_Party, Vic_Ptr)
   CHECKMEMBER(Myron_In_Party, Myron_Ptr)
   CHECKMEMBER(Marcus_In_Party, Marcus_Ptr)
   CHECKMEMBER(MacRae_In_Party, MacRae_Ptr)
   CHECKMEMBER(Sulik_In_Party, Sulik_Ptr)
   CHECKMEMBER(Lenny_In_Party, Lenny_Ptr)
   CHECKMEMBER(Cyberdog_In_Party, Cyberdog_Ptr)
   CHECKMEMBER(Doc_In_Party, Doc_Ptr)
   CHECKMEMBER(Goris_In_Party, Goris_Ptr)
   CHECKMEMBER(Davin_In_Party, Davin_Ptr)
   CHECKMEMBER(Miria_In_Party, Miria_Ptr)
   CHECKMEMBER(Robobrain_In_Party, Robobrain_Ptr)
   return 0;
end
