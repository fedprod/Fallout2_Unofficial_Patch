/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "siclsdor"



/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_INACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_WOOD
#define LOCK_STATUS                     STATE_STANDARD_LOCK
#define CLOSE_STATUS                    STATE_DOOR_CLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)







#define PARTY_CLOSE_DIST                (5)




procedure checkPartyMembers;



#include "../headers/doors.h"





variable last_source_obj;





procedure timed_event_p_proc begin
   if (obj_is_open(self_obj)) then begin
      if not combat_is_initialized then begin
         if ( (tile_distance_objs(self_obj, last_source_obj) < DOOR_CLOSE_DIST and critter_state(last_source_obj) != CRITTER_IS_DEAD)
              or checkPartyMembers) then
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         else
            obj_close(self_obj);
      end else
         add_timer_event(self_obj, 10, TIMER_CLOSE);
   end
end



/********************************************************************
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
********************************************************************/

procedure use_p_proc begin
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */

   if (obj_in_party(source_obj)) then begin
      Traps_Roll:=roll_vs_skill(source_obj,SKILL_TRAPS,Trap_Bonus);

      if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
         if (is_success(Traps_Roll)) then begin
            script_overrides;
            set_local_var(LVAR_Found_Trap,1);
            reg_anim_clear(source_obj);

            if (source_obj == dude_obj) then begin
                  display_msg(mstr(204));
            end
            else begin
                  display_msg(mstr(205));
            end
         end

         else begin
            if (obj_is_locked(self_obj)) then begin
                  script_overrides;
                  display_msg(mstr(203));
                  call Damage_Critter;
            end
            else begin
                  call Damage_Critter;
            end
         end
      end

      else if (obj_is_locked(self_obj)) then begin
         script_overrides;
         display_msg(mstr(203));
      end

      if (CLOSE_STATUS == STATE_DOOR_CLOSE) then begin
         last_source_obj := source_obj;
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end









































/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/


















#define CHECKMEMBER(inparty, obj)                                           \
   if (inparty) then begin                                                  \
      if (tile_distance_objs(self_obj, obj) <= PARTY_CLOSE_DIST) then begin \
         return 1;                                                          \
      end                                                                   \
   end

procedure checkPartyMembers begin
   CHECKMEMBER(Vic_In_Party, Vic_Ptr)
   CHECKMEMBER(Myron_In_Party, Myron_Ptr)
   CHECKMEMBER(Marcus_In_Party, Marcus_Ptr)
   CHECKMEMBER(MacRae_In_Party, MacRae_Ptr)
   CHECKMEMBER(Sulik_In_Party, Sulik_Ptr)
   CHECKMEMBER(Lenny_In_Party, Lenny_Ptr)
   CHECKMEMBER(Cyberdog_In_Party, Cyberdog_Ptr)
   CHECKMEMBER(Doc_In_Party, Doc_Ptr)
   CHECKMEMBER(Goris_In_Party, Goris_Ptr)
   CHECKMEMBER(Davin_In_Party, Davin_Ptr)
   CHECKMEMBER(Miria_In_Party, Miria_Ptr)
   CHECKMEMBER(Robobrain_In_Party, Robobrain_Ptr)
   return 0;
end



