/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/

/* Include Files */
#define SCRIPT_REALNAME "wibaydor"
#include "../headers/depolva.h"

/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_METAL
#define LOCK_STATUS                     STATE_ELECTRIC_LOCK
#define CLOSE_STATUS                    STATE_DOOR_CLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-80)

/* Experience Points for Skills */
#define Lockpick_Exp                    EXP_LOCKPICK_NEG_60

#define PARTY_CLOSE_DIST                (5)
/* How far do party members have to be from the door before it closes */

procedure Check_Repair(variable Cur_Var);

#define custom_map_update_p_proc
#include "../headers/doors.h"

/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time. It is used to make
   sure that the door does not lock on it's own and that the player will be able to get
   through once he has unlocked the door. Once more, this is so that locking and
   unlocking do not need to be done in Mapper.
**************************************************************************************/

procedure map_update_p_proc begin
   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_close(self_obj);
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end

   call Check_Repair(MVAR_Repair_Request1);
   call Check_Repair(MVAR_Repair_Request2);
   call Check_Repair(MVAR_Repair_Request3);
   call Check_Repair(MVAR_Repair_Request4);
   call Check_Repair(MVAR_Repair_Request5);
   call Check_Repair(MVAR_Repair_Request6);
end

/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/

procedure Check_Repair(variable Cur_Var) begin
   if (cur_map_index == MAP_SIERRA_123) then begin
       if ((map_var(Cur_Var) != 0) and (self_tile == 20118)) then begin
           obj_unlock(self_obj);
           ndebug("unlocking door for repair bot");
       end
   end
end

/***************************************************************************************
   This is to check to see if there are any party members within range of the door
   so it doesn't close.
****************************************************************************************/
