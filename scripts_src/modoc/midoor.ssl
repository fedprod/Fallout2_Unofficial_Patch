/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Item: Modoc Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: These doors are magic. They lock, close, trigger warnings, all kinds of fun stuff...

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
*/


/* Include Files */
#define SCRIPT_REALNAME "midoor"
#include "../headers/modoc.h"



/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_INACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_WOOD
#define LOCK_STATUS                     STATE_STANDARD_LOCK
#define CLOSE_STATUS                    STATE_DOOR_CLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)











procedure map_exit_p_proc;
procedure Destroy_P_Proc;

/*
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*/

#define custom_start
#define custom_use_obj_on_p_proc
#define custom_Lock_Door
#include "../headers/doors.h"

/*
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*/

/*
   Local variables which do not need to be saved between map changes.
*/

variable last_source_obj;
import variable cage_door_obj;
import variable coup_door_obj;
import variable modoc_death_claw_obj;
import variable slag_guard_obj;


/*
                         PROCEDURES
*/
/*
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*/

procedure start begin
   if (cage_door) then begin
      cage_door_obj := self_obj;
   end else if (coup_door) then begin
      coup_door_obj := self_obj;
   end
end

procedure timed_event_p_proc begin
   if ((cage_door == false) and (coup_door == false)) then begin
      if (obj_is_open(self_obj)) then begin
         if not combat_is_initialized then begin
            if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
               (checkPartyMembersNearDoor == false) and
               ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
               (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
               obj_close(self_obj);
               ndebug("door is closed");
            end else begin
               add_timer_event(self_obj, 10, TIMER_CLOSE);
            end
         end else begin
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         end
      end
   end
end



/**
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
**/

procedure use_p_proc begin
variable tamper := false;
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */
   ndebug("\nSELF TILE == "+self_tile);

   if (slag_enterance_door) then begin
      ndebug("slag_enterance_door");
      if (spoke_to_vegeir == false) then begin
         ndebug("spoke_to_vegeir == false");
         if (slag_guard_obj != 0) then begin
            ndebug("slag_guard_obj != 0");
            if (obj_can_see_obj(slag_guard_obj, dude_obj)) then begin
               ndebug("obj_can_see_obj(slag_guard_obj, dude_obj)");
               script_overrides;
               mod_add_timer_event(slag_guard_obj, 0, 1);
               tamper := true;
            end
         end
      end
   end

   if (tamper == false) then begin
      Traps_Roll:=roll_vs_skill(dude_obj,SKILL_TRAPS,Trap_Bonus);

      if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
         if (is_success(Traps_Roll)) then begin
            script_overrides;
            set_local_var(LVAR_Found_Trap,1);
            reg_anim_clear(source_obj);

            if (source_obj == dude_obj) then begin
               display_msg(mstr(204));
            end else begin
               display_msg(mstr(205));
            end
         end else begin
            if (obj_is_locked(self_obj)) then begin
               script_overrides;
               display_msg(mstr(203));
               call Damage_Critter;
            end else begin
               call Damage_Critter;
            end
         end
      end else if (obj_is_locked(self_obj)) then begin
         script_overrides;
         display_msg(mstr(203));
      end

      if (CLOSE_STATUS == STATE_DOOR_CLOSE) then begin
         if (source_obj != dude_obj) then begin
            last_source_obj := source_obj;
         end else begin
            last_source_obj := 0;
         end
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end

      if (coup_door) then begin
         if (chicken_set_1st_visible == false) then begin
            check_set_obj_visiblility(modoc_death_claw_obj, false);
            set_chicken_1st_visible;
         end
      end
   end
end


/*
   Should the player examine the door closely, then he should be allowed a lockpick
   roll, a traps roll and a perception roll. Depending on which rolls are made will
   determine how much information about the door will be given.
*/

procedure description_p_proc begin
   script_overrides;
   if ((local_var(LVAR_Locked) == STATE_ACTIVE) and (local_var(LVAR_Trapped) == STATE_ACTIVE)) then begin
       call Look_Traps_And_Locks;
   end else if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
       call Look_Traps;
   end else if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       call Look_Locks;
   end else if (DOOR_STATUS == STATE_WOOD) then begin
       display_msg(mstr(100));
   end else begin
       display_msg(mstr(101));
   end
end


/*
   Should the player try using a skill on the door, here are where the skill rolls
   will be made. The ones which need to be in here are: Lockpick and Traps. Science
   and Repair can be added to this list to give more information about the door.
*/

procedure use_skill_on_p_proc begin
variable Skill_Used;
variable tamper := false;
   if (slag_enterance_door) then begin
      if (spoke_to_vegeir == false) then begin
         if (slag_guard_obj != 0) then begin
            if (obj_can_see_obj(slag_guard_obj, dude_obj)) then begin
               script_overrides;
               mod_add_timer_event(slag_guard_obj, 0, 1);
               tamper := true;
            end
         end
      end
   end

   if (tamper == false) then begin
      Skill_Used:=action_being_used;

      if (Skill_Used == SKILL_LOCKPICK) then begin
         if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
            call Unlock_Lock;
         end
         else begin
            call Set_Lock;
         end
      end                                                          // End of Skill_Lockpick

      else if (Skill_Used == SKILL_TRAPS) then begin
         if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
            call Skill_Disarm_Traps;
         end
         else begin
            if (source_obj == dude_obj) then begin
                  display_msg(mstr(195));
            end

            else begin
                  display_msg(obj_name(source_obj)+mstr(200));
            end
         end
      end                                                          // End of Skill_Traps
   end

end


/*
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
*/
procedure use_obj_on_p_proc begin
   variable Tool;
   if (slag_enterance_door) then begin
      if (spoke_to_vegeir == false) then begin
         if (slag_guard_obj != 0) then begin
            if (obj_can_see_obj(slag_guard_obj, dude_obj)) then begin
               script_overrides;
               mod_add_timer_event(slag_guard_obj, 0, 1);
               Tool := -1;
            end
         end
      end
   end
   if (Tool != -1) then begin
      Tool:=obj_pid(obj_being_used_with);

      full_lockpick_block
      else if (Tool == PID_CROWBAR) then begin
         call Pry_Door;
      end else if ((Tool == PID_DYNAMITE) or (Tool == PID_PLASTIC_EXPLOSIVES)) then begin
         call Set_Trap;
      end
   end
end


/*
   Should the door sustain damage from anything (ie, dynamite, plastic explosives, rockets,
   or any other forms of damage), this procedure will be called to destroy the door and
   free up the space.
*/

procedure damage_p_proc begin
   variable Trap_Damage;

  /* Wood Door */

   if (DOOR_STATUS == STATE_WOOD) then begin
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
           destroy_object(self_obj);
       end

       else begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           destroy_object(self_obj);
       end
   end

  /* Metal Door */

   else if (DOOR_STATUS == STATE_METAL) then begin
       set_local_var(LVAR_Explosion_Attempts,local_var(LVAR_Explosion_Attempts)+1);
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
       end

       else if (local_var(LVAR_Explosion_Attempts) > DOOR_STRENGTH) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked,STATE_INACTIVE);
           destroy_object(self_obj);
       end
   end

   else begin
       display_msg(mstr(193));
   end
end


/*
   Whenever the map is first entered, this procedure will be called. The main purpose of
   this procedure is to lock the door from the outset, rather than having to worry about
   it through Mapper. After the door has been unlocked, it will remain as such, unless
   the player locks it once more.
*/

procedure map_enter_p_proc begin
   variable in_door_critter;

   obj_close(self_obj);
   match_dude_elevation;

   if (cage_door) then begin
      cage_door_obj := self_obj;
   end else if (coup_door) then begin
      coup_door_obj := self_obj;
   end

   if (is_loading_game == false) then begin
      /* Set up the door state when the player first enters the map */
      if (local_var(LVAR_Set_Door_Status) == 0) then begin
         set_local_var(LVAR_Set_Door_Status,1);
         set_local_var(LVAR_Locked,LOCKED_STATUS);
         set_local_var(LVAR_Trapped,TRAPPED_STATUS);
      end
      if ((cage_door == false) and (coup_door == false)) then begin
      end
      if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
         obj_close(self_obj);
         set_local_var(LVAR_Locked, STATE_ACTIVE);
         obj_lock(self_obj);
      end else begin
         obj_unlock(self_obj);
      end
    //  match_dude_elevation;
   end
end

procedure map_exit_p_proc begin
   if (obj_is_open(self_obj)) then begin
      obj_close(self_obj);
   end
end

/*
   This procedure gets called roughly every 30 seconds of real time. It is used to make
   sure that the door does not lock on it's own and that the player will be able to get
   through once he has unlocked the door. Once more, this is so that locking and
   unlocking do not need to be done in Mapper.
*/

procedure map_update_p_proc begin
   if (cage_door) then begin
      cage_door_obj := self_obj;
   end else if (coup_door) then begin
      coup_door_obj := self_obj;
   end

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end else begin
       obj_unlock(self_obj);
   end
end


/*
   This is the set of conditions for when you look at a locked and trapped door, based
   on your lockpick and traps skills and perception to notice things.
*/

procedure Look_Traps_And_Locks begin
   variable Perception_Check;
   variable Traps_Check;
   variable Locks_Check;

   Perception_Check:=do_check(dude_obj,STAT_pe,0);
   Traps_Check:=roll_vs_skill(dude_obj,SKILL_TRAPS,0);
   Locks_Check:=roll_vs_skill(dude_obj,SKILL_LOCKPICK,0);

   if (is_success(Perception_Check)) then begin


      /* Critical Success of a Perception Check  (Start)*/

       if (is_critical(Perception_Check)) then begin

           if (is_success(Traps_Check)) then begin
               set_local_var(LVAR_Found_Trap,1);                // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

               if (is_critical(Traps_Check)) then begin

                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(102));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(103));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(104));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(105));
                   end                                          // end of regular failure (Locks)
               end                                              // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

               else begin
                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(106));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(107));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(108));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(109));
                   end                                          // end of regular failure (Locks)
               end                                              // regular success (Traps)
           end

      /* Critical Failure of a Traps Check  (Start)*/

           else if (is_critical(Traps_Check)) then begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(110));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(111));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(112));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(113));
               end                                              // end of regular failure (Locks)
          end                                                   // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(114));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(115));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(116));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(117));
               end                                              // end of regular failure (Locks)
           end                                                  // regular failure (Traps)
       end                                                      // critical success (Stat_Pe)

      /* Critical Success of a Perception Check  (Finish)*/

/********/

      /* Success of a Perception Check  (Start)*/

       else begin
           if (is_success(Traps_Check)) then begin
               set_local_var(LVAR_Found_Trap,1);                // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

               if (is_critical(Traps_Check)) then begin

                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(118));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(119));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(120));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(121));
                   end                                          // end of regular failure (Locks)
               end                                              // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

               else begin
                   if (is_success(Locks_Check)) then begin
                       if (is_critical(Locks_Check)) then begin
                           display_msg(mstr(122));
                       end                                      // critical success (Locks)

                       else begin
                           display_msg(mstr(123));
                       end                                      // regular success (Locks)
                   end

                   else if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(124));
                   end                                          // critical Failure (Locks)

                   else begin
                       display_msg(mstr(125));
                   end                                          // end of regular failure (Locks)
               end                                              // regular success (Traps)
           end

      /* Critical Failure of a Traps Check  (Start)*/

           else if (is_critical(Traps_Check)) then begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(126));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(127));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(128));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(129));
               end                                              // end of regular failure (Locks)
           end                                                  // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(130));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(131));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(132));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(133));
               end                                              // end of regular failure (Locks)
           end                                                  // regular failure (Traps)
       end                                                      // regular success (Stat_pe)
   end

      /* Success of a Perception Check  (Finish)*/

/********/

      /* Critical Failure of a Perception Check  (Start)*/

   else if (is_critical(Perception_Check)) then begin
       if (is_success(Traps_Check)) then begin
           set_local_var(LVAR_Found_Trap,1);                    // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

           if (is_critical(Traps_Check)) then begin

               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(134));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(135));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(136));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(137));
               end                                              // end of regular failure (Locks)
           end                                                  // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(138));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(139));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(140));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(141));
               end                                              // end of regular failure (Locks)
           end                                                  // regular success (Traps)
       end

      /* Critical Failure of a Traps Check  (Start)*/

       else if (is_critical(Traps_Check)) then begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(142));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(143));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(144));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(145));
           end                                                  // end of regular failure (Locks)
       end                                                      // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

       else begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(146));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(147));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(148));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(149));
           end                                                  // end of regular failure (Locks)
       end                                                      // regular failure (Traps)
   end                                                          // Critical Failure (Stat_pe)

      /* Critical Failure of a Perception Check  (Finish)*/

/********/

      /* Failure of a Perception Check  (Start)*/

   else begin
       if (is_success(Traps_Check)) then begin
           set_local_var(LVAR_Found_Trap,1);                    // player has found the trap

      /* Critical Success of a Traps Check  (Start)*/

           if (is_critical(Traps_Check)) then begin

               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(150));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(151));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(152));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(153));
               end                                              // end of regular failure (Locks)
           end                                                  // critical success (Traps)

      /* Success of a Traps Check  (Start)*/

           else begin
               if (is_success(Locks_Check)) then begin
                   if (is_critical(Locks_Check)) then begin
                       display_msg(mstr(154));
                   end                                          // critical success (Locks)

                   else begin
                       display_msg(mstr(155));
                   end                                          // regular success (Locks)
               end

               else if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(156));
               end                                              // critical Failure (Locks)

               else begin
                   display_msg(mstr(157));
               end                                              // end of regular failure (Locks)
           end                                                  // regular success (Traps)
       end

      /* Critical Failure of a Traps Check  (Start)*/

       else if (is_critical(Traps_Check)) then begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(158));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(159));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(160));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(161));
           end                                                  // end of regular failure (Locks)
       end                                                      // critical Failure (Traps)

      /* Failure of a Traps Check  (Start)*/

       else begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(162));
               end                                              // critical success (Locks)

               else begin
                   display_msg(mstr(163));
               end                                              // regular success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(164));
           end                                                  // critical Failure (Locks)

           else begin
               display_msg(mstr(165));
           end                                                  // end of regular failure (Locks)
       end                                                      // regular failure (Traps)
   end                                                          // Regular Failure (Stat_pe)

      /* Failure of a Perception Check  (Finish)*/

end


/********
   This is the set of conditions for when you look at a trapped door, based on your
   traps skill and perception to notice the trap.
****************/

procedure Look_Traps begin
   variable Perception_Check;
   variable Traps_Check;

   Perception_Check:=do_check(dude_obj,STAT_pe,0);
   Traps_Check:=roll_vs_skill(dude_obj,SKILL_TRAPS,0);

   if (is_success(Perception_Check)) then begin
       if (is_critical(Perception_Check)) then begin
           if (is_success(Traps_Check)) then begin
               if (is_critical(Traps_Check)) then begin
                   display_msg(mstr(104));
               end                                              // Critical Success (traps)

               else begin
                   display_msg(mstr(108));
               end                                              // Regular Success (Traps)
           end

           else if (is_critical(Traps_Check)) then begin
               display_msg(mstr(112));
           end                                                  // Critical Failure (Traps)

           else begin
               display_msg(mstr(116));
           end                                                  // Regular Failure (Traps)
       end                                                      // Critical Success (Stat_Pe)

       else begin
           if (is_success(Traps_Check)) then begin
               if (is_critical(Traps_Check)) then begin
                   display_msg(mstr(120));
               end                                              // Critical Success (traps)

               else begin
                   display_msg(mstr(124));
               end                                              // Regular Success (Traps)
           end

           else if (is_critical(Traps_Check)) then begin
               display_msg(mstr(128));
           end                                                  // Critical Failure (Traps)

           else begin
               display_msg(mstr(132));
           end                                                  // Regular Failure (Traps)
       end                                                      // Regular Success (Stat_pe)
   end

   else if (is_critical(Perception_Check)) then begin
       if (is_success(Traps_Check)) then begin
           if (is_critical(Traps_Check)) then begin
               display_msg(mstr(136));
           end                                                  // Critical Success (traps)

           else begin
               display_msg(mstr(140));
           end                                                  // Regular Success (Traps)
       end

       else if (is_critical(Traps_Check)) then begin
           display_msg(mstr(144));
       end                                                      // Critical Failure (Traps)

       else begin
           display_msg(mstr(148));
       end                                                      // Regular Failure (Traps)
   end                                                          // Critical Failure (Stat_pe)

   else begin
       if (is_success(Traps_Check)) then begin
           if (is_critical(Traps_Check)) then begin
               display_msg(mstr(152));
           end                                                  // Critical Success (traps)

           else begin
               display_msg(mstr(156));
           end                                                  // Regular Success (Traps)
       end

       else if (is_critical(Traps_Check)) then begin
           display_msg(mstr(160));
       end                                                      // Critical Failure (Traps)

       else begin
           display_msg(mstr(164));
       end                                                      // Regular Failure (Traps)
   end                                                          // Regular Failure (Stat_Pe)

end


/*******
   This is the set of conditions for when you look at a locked door, based on your
   lockpick skill and perception to notice the lock.
***************/

procedure Look_Locks begin
   variable Perception_Check;
   variable Locks_Check;

   Perception_Check:=do_check(dude_obj,STAT_pe,0);
   Locks_Check:=roll_vs_skill(dude_obj,SKILL_LOCKPICK,0);

   if (is_success(Perception_Check)) then begin
       if (is_critical(Perception_Check)) then begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(114));
               end                                              // Critical Success (Locks)

               else begin
                   display_msg(mstr(115));
               end                                              // Regular Success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(116));
           end                                                  // Critical Failure (Locks)

           else begin
               display_msg(mstr(117));
           end                                                  // Regular Failure (Locks)
       end                                                      // Critical Success (Stat_Pe)

       else begin
           if (is_success(Locks_Check)) then begin
               if (is_critical(Locks_Check)) then begin
                   display_msg(mstr(130));
               end                                              // Critical Success (Locks)

               else begin
                   display_msg(mstr(131));
               end                                              // Regular Success (Locks)
           end

           else if (is_critical(Locks_Check)) then begin
               display_msg(mstr(132));
           end                                                  // Critical Failure (Locks)

           else begin
               display_msg(mstr(133));
           end                                                  // Regular Failure (Locks)
       end                                                      // Regular Success (Stat_pe)
   end

   else if (is_critical(Perception_Check)) then begin
       if (is_success(Locks_Check)) then begin
           if (is_critical(Locks_Check)) then begin
               display_msg(mstr(146));
           end                                                  // Critical Success (Locks)

           else begin
               display_msg(mstr(147));
           end                                                  // Regular Success (Locks)
       end

       else if (is_critical(Locks_Check)) then begin
           display_msg(mstr(148));
       end                                                      // Critical Failure (Locks)

       else begin
           display_msg(mstr(149));
       end                                                      // Regular Failure (Locks)
   end                                                          // Critical Failure (Stat_pe)

   else begin
       if (is_success(Locks_Check)) then begin
           if (is_critical(Locks_Check)) then begin
               display_msg(mstr(162));
           end                                                  // Critical Success (Locks)

           else begin
               display_msg(mstr(163));
           end                                                  // Regular Success (Locks)
       end

       else if (is_critical(Locks_Check)) then begin
           display_msg(mstr(164));
       end                                                      // Critical Failure (Locks)

       else begin
           display_msg(mstr(165));
       end                                                      // Regular Failure (Locks)
   end                                                          // Regular Failure (Stat_Pe)
end


/*******
   This procedure will do a standard Traps roll to see if the player can
   find and remove traps from the door.
***************/

procedure Skill_Disarm_Traps begin
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Traps_Roll:=roll_vs_skill(dude_obj,SKILL_TRAPS,Trap_Bonus);

   call Disarm_Traps;
end


/*******
   This procedure will allow the player to set traps on doors behind him. The door
   will need to be closed, as all traps are set to go off if the door is openned.
***************/

procedure Set_Trap begin
   variable Explosive;
   variable Removal_Counter;

/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Traps_Roll:=roll_vs_skill(dude_obj,SKILL_TRAPS,Trap_Set_Bonus);

   Explosive:=obj_being_used_with;

   if (obj_is_open(self_obj)) then begin
      script_overrides;
      if (source_obj == dude_obj) then begin
         display_msg(mstr(206));
      end else begin
         display_msg(obj_name(source_obj)+mstr(207));
      end
   end else begin
      script_overrides;
      Removal_Counter:=rm_mult_objs_from_inven(source_obj,Explosive,1);

      if (is_success(Traps_Roll)) then begin
         set_local_var(LVAR_Trapped,STATE_ACTIVE);
         if (source_obj == dude_obj) then begin
            display_msg(mstr(208));
         end else begin
            display_msg(obj_name(source_obj)+mstr(210));
         end
      end else if (is_critical(Traps_Roll)) then begin
         call Damage_Critter;
      end else begin
         if (source_obj == dude_obj) then begin
            display_msg(mstr(209));
         end else begin
            display_msg(obj_name(source_obj)+mstr(211));
         end
      end
   end
end

/*
   This procedure will actively set the lock on the door and set all of
   the coresponding varaibles for it.
*********/

procedure Lock_Door begin
   if ((davin_door) or (miria_door)) then begin
      display_mstr(320);
   end else if (is_success(Locks_Roll)) then begin
      set_local_var(LVAR_Locked, STATE_ACTIVE);                // Door is unlocked
      obj_lock(self_obj);                                      // engine unlock door

      if (source_obj == dude_obj) then begin
         display_msg(mstr(189));
      end else begin
         display_msg(obj_name(source_obj)+mstr(191));
      end

      if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
         set_local_var(LVAR_Gave_Locks_XP,1);
         give_xp(Lockpick_Exp);
      end
   end else begin
      if (source_obj == dude_obj) then begin
         display_msg(mstr(190));
      end else begin
         display_msg(obj_name(source_obj)+mstr(192));
      end
   end
end



procedure destroy_p_proc begin
   if (cage_door) then begin
      cage_door_obj := 0;
   end else if (coup_door) then begin
      coup_door_obj := 0;
   end
end
